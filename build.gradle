plugins {
    id 'java'
}

version '1.0'

sourceSets.main.java.srcDirs = ["src"]

repositories {
    mavenCentral()
    maven { url "https://raw.githubusercontent.com/Zelaux/MindustryRepo/master/repository" }
    maven { url 'https://www.jitpack.io' }
}

java {
    targetCompatibility = JavaVersion.VERSION_1_8
    sourceCompatibility = JavaVersion.VERSION_17
}

ext {
    mindustryVersion = 'v146'
    jabelVersion = "93fde537c7"
    isWindows = System.getProperty("os.name").toLowerCase().contains("windows")
    sdkRoot = System.getenv("ANDROID_HOME") ?: System.getenv("ANDROID_SDK_ROOT")
}

allprojects {
    tasks.withType(JavaCompile).configureEach {
        options.compilerArgs.addAll(['--release', '8'])
    }
}

dependencies {
    compileOnly "com.github.Anuken.Arc:arc-core:$mindustryVersion"
    compileOnly "com.github.Anuken.Mindustry:core:$mindustryVersion"
    annotationProcessor "com.github.Anuken:jabel:$jabelVersion"
}

configurations.all {
    resolutionStrategy.eachDependency { details ->
        if(details.requested.group == 'com.github.Anuken.Arc'){
            details.useVersion "$mindustryVersion"
        }
    }
}

tasks.register('jarAndroid') {
    dependsOn "jar"

    doLast {
        if(!sdkRoot || !new File(sdkRoot).exists()) throw new GradleException("No valid Android SDK found. Ensure that ANDROID_HOME is set to your Android SDK directory.");

        def platformRoot = new File("$sdkRoot/platforms/").listFiles().sort().reverse().find{ f -> new File(f, "android.jar").exists()}

        if(!platformRoot) throw new GradleException("No android.jar found. Ensure that you have an Android platform installed.")

        def dependencies = (configurations.compileClasspath.get().files + configurations.runtimeClasspath.get().files + [new File(platformRoot, "android.jar")]).collect{ "--classpath $it.path" }.join(" ")

        def d8 = isWindows ? "d8.bat" : "d8"

        "$d8 $dependencies --min-api 14 --output ${project.archivesBaseName}Android.jar ${project.archivesBaseName}Desktop.jar"
            .execute(null, new File("$buildDir/libs")).waitForProcessOutput(System.out, System.err)
    }
}

tasks.named('jar') {
    archiveFileName = "${archivesBaseName}Desktop.jar"

    from {
        configurations.runtimeClasspath.get().filter { it.exists() }.collect { if (it.isDirectory()) it else zipTree(it) }
    }

    from(projectDir) {
        include "mod.hjson"
    }

    from("assets/") {
        include "**"
    }
}

tasks.register('deploy', Jar) {
    dependsOn tasks.named('jarAndroid')
    dependsOn tasks.named('jar')
    archiveFileName = "${archivesBaseName}.jar"

    from {
        [zipTree("$buildDir/libs/${project.archivesBaseName}Desktop.jar"),
         zipTree("$buildDir/libs/${project.archivesBaseName}Android.jar")]
    }

    doLast {
        delete {
            delete "$buildDir/libs/${project.archivesBaseName}Desktop.jar"
            delete "$buildDir/libs/${project.archivesBaseName}Android.jar"
        }
    }
}